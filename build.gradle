plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
}

version = '0.4.0'
sourceCompatibility = 1.8

ext.antlr = [
        grammarpackage: "at.tugraz.ist.compiler.antlr",
        antlrSource: 'src/main',
        destinationDir: "src/main/java"
]

repositories {
    mavenCentral()
}

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

dependencies {
    compile group: "com.github.pellierd", name: "pddl4j", version: "3.8.3"
    compile group: "org.antlr", name: "antlr4-runtime", version: "4.7"
    antlr4 group: "org.antlr", name: "antlr4", version: "4.7"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = fileTree(antlr.antlrSource).include('**/Pddl.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

test.finalizedBy jacocoTestReport

jar {
    manifest {
        attributes 'Implementation-Title': 'RBL Compiler',
                'Implementation-Version': version,
                'Main-Class': 'at.tugraz.ist.compiler.RuleBasedCompiler'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}